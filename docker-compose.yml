version: "3.9"

services:
  backend:
    build: ./backend
    container_name: django
    restart: unless-stopped
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/projeto
    environment:
      - DEBUG=True
      - COMPOSE_HTTP_TIMEOUT=180
    depends_on:
      - db
      - redis
    command: >
      command: sh -c "chmod +x /projeto/scripts/entrypoint.sh && /projeto/scripts/entrypoint.sh"

    networks:
      - app_network

  frontend:
    build: ./frontend
    container_name: nextjs
    image: "projeto_cn_frontend"
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - NEXT_DEV=true
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - COMPOSE_HTTP_TIMEOUT=180
    depends_on:
      - backend
    command: >
      sh -c "npm run build && npm start"
    networks:
      - app_network

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app_network

volumes:
  pgdata:


networks:
  app_network:
    driver: bridge
